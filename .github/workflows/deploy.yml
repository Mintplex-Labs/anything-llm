name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    env:
      SSH_HOST: ${{ vars.SSH_HOST }}
      SSH_USER: ${{ vars.SSH_USER }}
      SSH_DIR: ${{ vars.SSH_DIR || '~' }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      # Step 1: Checkout the code (this runs on the GitHub runner, not the server)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install SSH keys
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST > ~/.ssh/known_hosts

      # Step 3: Create work directory on server
      - name: Create work directory
        run: |
          ssh $SSH_USER@$SSH_HOST "
            mkdir -p $SSH_DIR/${GITHUB_REPOSITORY##*/}
          "

      # Step 4: Transfer repository files to server
      - name: Transfer files to server
        run: |
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./ $SSH_USER@$SSH_HOST:$SSH_DIR/${GITHUB_REPOSITORY##*/}/

      # Step 5: Deploy on server
      - name: Deploy application to server
        run: |
          ssh $SSH_USER@$SSH_HOST "
            cd $SSH_DIR/${GITHUB_REPOSITORY##*/} &&
            docker compose down || true &&
            docker compose --profile prod up -d --build
          "

      # Step 6: Cleanup SSH keys
      - name: Cleanup
        run: rm -rf ~/.ssh
