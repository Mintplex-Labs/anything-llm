name: Publish OneNew Primary Docker Image (amd64/arm64)

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: ['master']
    paths-ignore:
      - '**.md'
      - '.gitmodules'
      - 'cloud-deployments/**/*'
      - 'images/**/*'
      - '.vscode/**/*'
      - '**/.env.example'
      - '.github/ISSUE_TEMPLATE/**/*'
      - '.devcontainer/**/*'
      - 'embed/**/*'
      - 'browser-extension/**/*'
      - 'server/utils/agents/aibitat/example/**/*'
      - 'extras/**/*'

jobs:
  push_multi_platform_to_registries:
    name: Push Docker multi-platform image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Check if DockerHub credentials are set
        id: dockerhub
        shell: bash
        run: |
          if [[ -n "${{ secrets.DOCKER_USERNAME }}" && -n "${{ secrets.DOCKER_PASSWORD }}" ]]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: üß∞ Set up QEMU for arm64 emulation
        uses: docker/setup-qemu-action@v3

      - name: üß± Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.22.0

      - name: üîê Log in to DockerHub
        if: steps.dockerhub.outputs.enabled == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üîê Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata for GHCR
        id: meta_ghcr
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: üè∑Ô∏è Extract metadata for DockerHub
        if: steps.dockerhub.outputs.enabled == 'true'
        id: meta_dockerhub
        uses: docker/metadata-action@v5
        with:
          images: akigogikar/onenew
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: üß™ DEBUG: Show tags to be pushed
        run: |
          echo "GHCR Tags:"
          echo "${{ steps.meta_ghcr.outputs.tags }}"
          if [ "${{ steps.dockerhub.outputs.enabled }}" == "true" ]; then
            echo "DockerHub Tags:"
            echo "${{ steps.meta_dockerhub.outputs.tags }}"
          fi

      - name: üöÄ Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          sbom: true
          provenance: mode=max
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_ghcr.outputs.tags }}
          labels: ${{ steps.meta_ghcr.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üöÄ Build and Push to DockerHub
        if: steps.dockerhub.outputs.enabled == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          sbom: true
          provenance: mode=max
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_dockerhub.outputs.tags }}
          labels: ${{ steps.meta_dockerhub.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ------------------------ Optional Docker Scout Section (non-blocking) ------------------------

      - name: üõ°Ô∏è Collect CVE Exceptions (VEX files)
        id: cve-list
        continue-on-error: true
        run: |
          CVE_NAMES=""
          for file in ./docker/vex/*.vex.json; do
            [ -e "$file" ] || continue
            filename=$(basename "$file")
            stripped_filename=${filename%.vex.json}
            CVE_NAMES+=" $stripped_filename"
          done
          echo "CVE_EXCEPTIONS=$CVE_NAMES" >> $GITHUB_OUTPUT

      - name: üõ°Ô∏è Log in to Docker (for Scout attestation)
        continue-on-error: true
        run: |
          echo "${{ secrets.DOCKER_PAT }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: üõ°Ô∏è Add VEX Attestations (non-blocking)
        continue-on-error: true
        env:
          CVE_EXCEPTIONS: ${{ steps.cve-list.outputs.CVE_EXCEPTIONS }}
        run: |
          echo "Attaching VEX for: $CVE_EXCEPTIONS"
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          for cve in $CVE_EXCEPTIONS; do
            for tag in "${{ join(fromJSON(steps.meta_ghcr.outputs.json).tags, ' ') }}"; do
              echo "Attaching $cve to $tag"
              docker scout attestation add \
                --file "./docker/vex/$cve.vex.json" \
                --predicate-type https://openvex.dev/ns/v0.2.0 \
                $tag || echo "‚ö†Ô∏è Failed to attach $cve to $tag"
            done
          done
